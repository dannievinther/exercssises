---
import { Picture } from "@astrojs/image/components";
import ExerciseLabel from "./exercise/ExerciseLabel.astro";
import BtnControls from "./exercise/BtnControls.astro";
import Editor from "./exercise/Editor.astro";
import Output from "./exercise/Output.astro";
import Hints from "./exercise/Hints.astro";
const { data, num, all } = Astro.props;
const boxes = [...Array(data.frontmatter.boxes)];
const { Content } = data;
const {
  title,
  id,
  isExtra,
  hints,
  customClass,
  help,
  startingCSS,
  canAddBoxes,
  targetSrc,
} = data.frontmatter;
---

<section
  data-extra={isExtra && "true"}
  data-exercise-key={"vc-" + id}
  class={customClass ?? ""}
>
  <ExerciseLabel title={title} {num} {all} />

  {
    isExtra && (
      <div class="banner" data-banner-title="Ekstra">
        Ekstra
      </div>
    )
  }

  <article class="exercise-details">
    <div class="exercise-content">
      <Content />

      {hints ? <Hints {hints} /> : <div data-no-hints>Ingen hints</div>}
    </div>
    {
      targetSrc.type === "video" ? (
        <video muted loop autoplay playsinline preload="metadata">
          <source src={targetSrc.path} type="video/mp4" />
        </video>
      ) : (
        <Picture
          loading={num === 1 ? "eager" : "lazy"}
          fetchpriority={num === 1 ? "high" : "low"}
          src={targetSrc.path}
          formats={["avif", "webp"]}
          aspectRatio={targetSrc.width / targetSrc.height}
          alt=""
          widths={[targetSrc.width]}
          width={targetSrc.width}
          height={targetSrc.height}
        />
      )
    }

    {canAddBoxes && <BtnControls />}
  </article>

  <!-- editor -->
  <Editor
    id={id}
    startingCSS={startingCSS.trim()}
    {boxes}
    helpLink={help?.link}
    helpTopic={help?.topic}
  />

  <Output {boxes} />
</section>

<style lang="scss">
  small {
    font-size: 0.8rem;
    font-weight: 500;
    color: hsl(209, 23%, 74%);
    position: relative;
    display: flex;
    gap: 0.5ch;
    flex-wrap: wrap;
    margin-inline-start: var(--space-2);

    a:any-link {
      text-decoration: none;
      color: var(--blue-500);
      // display: inline-flex;
      // border-radius: var(--bdrs-sm);
      gap: var(--space-1);
      align-items: center;

      span {
        text-decoration: underline;
      }

      svg {
        inline-size: 1em;
        block-size: 1em;
      }

      &:hover,
      &:focus-visible {
        color: #fff;

        span {
          text-decoration: underline var(--blue-500);
        }
      }
    }
  }
  .reset-buttons {
    position: absolute;
    inset-inline-end: 0;
    inset-block-start: var(--space-2);
    z-index: 1;
    display: grid;
    gap: 0 0.4ch;
    place-items: end;
    margin-inline-end: var(--space-2);
  }

  .reset-buttons > * {
    grid-area: 1 / 1;
  }

  .button-group-confirm {
    display: flex;
    gap: 0.5ch;
    pointer-events: none;
    opacity: 0;
    transition: 0.3s opacity;
  }

  .reset-buttons.active .button-group-confirm {
    opacity: 1;
    pointer-events: auto;
  }

  .reset-buttons.active > button {
    opacity: 0;
    pointer-events: none;
  }

  button[data-accept] {
    --btn-stroke: 0;
    // --btn-theme: #fb28a8;
    // --btn-theme: #ffa956;
    --btn-theme: var(--blue-500);
    position: relative;
    color: #fff;
    padding: 0;
    inline-size: 28px;
    block-size: 28px;
    background: transparent;
    display: grid;
    place-content: center;
    border-radius: var(--bdrs-round);
  }

  :global(button svg path) {
    stroke-width: 3;
  }

  button:focus-visible {
    --btn-stroke: 2px;
  }

  @media (hover: hover) {
    button:hover {
      --btn-stroke: 2px;
    }
  }
</style>

<script>
  import "../js/intersecting";
</script>
