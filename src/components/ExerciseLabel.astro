---
import { Icon } from "astro-icon";
const { title, num, all } = Astro.props;
---

<h2 class="small-label" id={`exercise-${num}`}>
  <a href={`#exercise-${num}`}>
    <Icon name="lucide:link" width="18" height="18" stroke-width="2.5" />
    {title}
  </a>
  <span>{num} / {all}</span>
</h2>

<style lang="scss">
  a:hover {
    text-decoration: none;
  }

  .small-label {
    font-family: "Mona Sans", system-ui;
    text-transform: uppercase;
    font-weight: 800;
    font-size: 0.8em;
    color: var(--ui-accent);
    letter-spacing: 1px;
    display: flex;
    justify-content: space-between;
    flex-wrap: wrap;
    align-items: baseline;
    align-self: start;
    // box-shadow: 0 5px 2.5px hsl(200deg 95% 3% / 4%),
    //   0 12px 6.5px hsl(200deg 95% 3% / 5%), 0 22.5px 13px hsl(200deg 95% 3% / 7%),
    //   0 40.2px 24px hsl(200deg 95% 3% / 8%), 0 75.2px 44px hsl(200deg 95% 3% / 9%),
    //   0 180px 80px hsl(200deg 95% 3% / 13%);
    // box-shadow: 0px 5px 10px 2px rgb(11 47 106 / 7%);
    // inline-size: max-content;

    // margin-block-start: calc(-1 * var(--space-7));
    // background: #fff;
    // border-radius: var(--bdrs-md);
    // border: 0.125rem solid #2c203b;
    // isolation: isolate;
    // overflow: hidden;
    transition: 0.3s transform;

    // margin-inline-start: calc(-1 * var(--space-5));

    --min-font: 18;
    --max-font: 22;
    --screen-max: 1200;
    --screen-min: 375;
    font-size: clamp(
      var(--min-font) * 1px,
      var(--responsive),
      var(--max-font) * 1px
    );
    line-height: 1.125;

    padding-block-end: var(--space-3);
    border-bottom: 1px solid hsl(209deg 27% 90%);

    // @media (max-width: 895px) {
    //   margin-block-end: var(--space-5);
    //   margin-block-start: calc(-1 * var(--space-8));
    // }

    a:any-link {
      font-variation-settings: "wdth" var(--font-stretch, 125);
      position: relative;
      color: var(--ui-accent);
      // background: #fff;
      text-decoration: none;
      // padding: var(--space-1) var(--space-5);
      transition: translate 0.2s cubic-bezier(0.645, 0.045, 0.355, 1),
        font-variation-settings 0.5s cubic-bezier(0.215, 0.61, 0.355, 1);

      display: grid;
      align-items: baseline;
      grid-template-columns: 0 1fr;
      gap: 0.1em;
      margin-inline-start: -0.2em;

      &:hover {
        translate: calc(var(--space-5) + 0.2em) 0;
      }

      [astro-icon] {
        color: var(--purple-600);
        inline-size: 0.8em;
        block-size: 0.8em;
        opacity: 0;
        transition: 0.2s cubic-bezier(0.645, 0.045, 0.355, 1);
        justify-self: flex-end;
        translate: -0.4em 0;

        :global(g) {
          stroke-width: 2.5;
        }
      }

      &:hover svg {
        opacity: 1;
        translate: 0 0;
      }

      // &::before {
      //   content: "";
      //   // color: var(--violet-500);
      //   color: var(--blue-500);
      //   // position: absolute;
      //   // font-size: 1rem;
      //   // top: 50%;
      //   // left: 0;
      //   inline-size: 0.8em;
      //   block-size: 0.8em;
      //   background: url("data:image/svg+xml,%3Csvg fill='none' stroke='%235000ca' viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath stroke-linecap='round' stroke-linejoin='round' stroke-width='3' d='M13.828 10.172a4 4 0 00-5.656 0l-4 4a4 4 0 105.656 5.656l1.102-1.101m-.758-4.899a4 4 0 005.656 0l4-4a4 4 0 00-5.656-5.656l-1.1 1.1'%3E%3C/path%3E%3C/svg%3E")
      //     50% / contain no-repeat;
      //   // transform: translate(50%, -50%) scale(2);
      //   opacity: 0;
      //   transition: 0.2s cubic-bezier(0.645, 0.045, 0.355, 1);
      //   justify-self: flex-end;
      //   translate: -0.4em 0;
      // }

      // &:hover::before {
      //   opacity: 1;
      //   translate: 0 0;
      // }
    }

    span {
      font-weight: 600;
      font-size: 0.55em;
      color: var(--blue-muted);
      font-variation-settings: "wdth" 125;
    }
  }

  .small-label::before {
    content: none;
    block-size: 2px;
    inline-size: 1.5rem;
    background: var(--ui-accent);
    background: currentColor;
  }
</style>

<script>
  const copyMe = document.querySelectorAll(".small-label a");

  copyMe.forEach((c) => {
    c.addEventListener("click", ({ target }) => {
      const url = window.location.href.split("#")[0];
      if (target.tagName === "A")
        navigator.clipboard.writeText(`${url}${c.hash}`);
    });
  });
</script>
